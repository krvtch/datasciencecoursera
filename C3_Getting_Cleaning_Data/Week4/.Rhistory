rates
df <- sapply(rates, )
datarates <- rates[["ExchangeRatesList"]]
datarates
sapply(datarates, function(x) x[[14]])
sapply(datarates, function(x) x[[13]])
datarates[[1]][[1]]
fromJSON(readLines("https://api.eremit.com.my/EremitService.svc/GetExchangeRates"))
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
datarates <- rates[["ExchangeRatesList"]]
rates2 <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates", method = 'C')
rates2
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
datarates <- rates[["ExchangeRatesList"]]
datarates <- rates[["ExchangeRatesList"]][["1"]]
datarates
datarates <- rates[["ExchangeRatesList"]][[1]]
datarates
rates[["ExchangeRatesList"]][[1]]$ExchangeRate
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
datarates <- rates[["ExchangeRatesList"]][[9]]$ExchangeRate
datarates
data.frame(rates[["ExchangeRatesList"]][[9]])
ddd <- data.frame(rates[["ExchangeRatesList"]][[9]])
View(ddd)
View(ddd)
install.packages("jsonlite")
library(jsonlite)
vignette("jsonlite")
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
validate(rates)
flatten(rates)
rbind(rates)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
for (i in length(rates)) {
rbind.data.frame(rates[["ExchangeRatesList"]][[i]])
}
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
for (i in length(rates)) {
data <- rbind.data.frame(rates[["ExchangeRatesList"]][[i]])
}
data
for (i in length(rates)) {
xx <- rbind.data.frame(rates[["ExchangeRatesList"]][[i]])
}
xx
length(rates)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates
data.frame(rates)
subset(data.frame(rates), select = -c(g,h,i))
rates_df <- subset(data.frame(rates), select = -c(6:8))
subset(data.frame(rates), select = -c(6:8))
rates_df <- subset(data.frame(rates), select = c(2,4,5))
subset(data.frame(rates), select = c(2,4,5))
rates_df[1,]
rates_df[9,]
filename <- getwd()
filename
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
filename <- paste(getwd(),"/summ_PHP.txt")
write.table(rate_PHP, file=filename)
rate_PHP <- rates_df[9,]
write.table(rate_PHP, file=filename)
filename <- paste(getwd(),"/summ_PHP.txt",sep = "")
rate_PHP <- rates_df[9,]
write.table(rate_PHP, file=filename)
write.table(rate_PHP, file=filename, row.names = FALSE)
write.table(rate_PHP, file=filename, row.names = FALSE, sep = T)
write.table(rate_PHP, file=filename, row.names = FALSE, sep = '/t')
write.table(rate_PHP, file=filename, row.names = FALSE, sep = '\t')
aa <- read.table(filename, header = T, sep = "\t")
aa
aa <- read.table(filename, header = T, sep = "\t")
aa
sd <- Sys.Date()
st <- Sys.time()
sd
st
st
st_df <- data.frame(st, )
st_df <- data.frame(st)
st_df
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
st_df
rate_PHP <- cbind(rates_df[9,],System_Time)
rate_PHP
summ <- read.table(filename, header = T, sep = "\t")
summ
rate_PHP <- cbind(rates_df[9,],System_Time)
rate_PHP
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
filename <- paste(getwd(),"/summ_PHP.txt",sep = "")
summ <- read.table(filename, header = T, sep = "\t")
rate_PHP <- cbind(rates_df[9,],System_Time)
rate_PHP
rate_PHP[1,]
library(jsonlite)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
filename1 <- paste(getwd(),"/summ_PHP.txt",sep = "")
summ <- read.table(filename1, header = T, sep = "\t")
rate_PHP <- cbind(rates_df[9,],System_Time)
filename2 <- paste(getwd(),"/today_PHP.txt",sep = "")
write.table(rate_PHP, file=filename2, row.names = FALSE, sep = '\t')
today <- read.table(filename2, header = F, sep = "\t")
summ <- rbind(summ, today)
write.table(rate_PHP, file=filename1, row.names = FALSE, sep = '\t')
library(jsonlite)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
filename1 <- paste(getwd(),"/summ_PHP.txt",sep = "")
summ <- read.table(filename1, header = T, sep = "\t")
rate_PHP <- cbind(rates_df[9,],System_Time)
filename2 <- paste(getwd(),"/today_PHP.txt",sep = "")
write.table(rate_PHP, file=filename2, row.names = FALSE, sep = '\t')
today <- read.table(filename2, header = T, sep = "\t")
summ <- rbind(summ, today)
write.table(rate_PHP, file=filename1, row.names = FALSE, sep = '\t')
library(jsonlite)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
filename1 <- paste(getwd(),"/summ_PHP.txt",sep = "")
summ <- read.table(filename1, header = T, sep = "\t")
rate_PHP <- cbind(rates_df[9,],System_Time)
filename2 <- paste(getwd(),"/today_PHP.txt",sep = "")
write.table(rate_PHP, file=filename2, row.names = FALSE, sep = '\t')
today <- read.table(filename2, header = T, sep = "\t")
summ <- rbind(summ, today)
write.table(summ, file=filename1, row.names = FALSE, sep = '\t')
library(jsonlite)
rates <- fromJSON("https://api.eremit.com.my/EremitService.svc/GetExchangeRates")
rates_df <- subset(data.frame(rates), select = c(2,4,5))
System_Time <- Sys.time()
st_df <- data.frame(System_Time)
filename1 <- paste(getwd(),"/summ_PHP.txt",sep = "")
summ <- read.table(filename1, header = T, sep = "\t")
rate_PHP <- cbind(rates_df[9,],System_Time)
filename2 <- paste(getwd(),"/today_PHP.txt",sep = "")
write.table(rate_PHP, file=filename2, row.names = FALSE, sep = '\t')
today <- read.table(filename2, header = T, sep = "\t")
summ <- rbind(summ, today)
write.table(summ, file=filename1, row.names = FALSE, sep = '\t')
cube <- function(x,n){
x^3
}
cube(3)
x <- 1:10
if(x >5){
x<-0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
mywdir <- getwd()
mywdir
complete <- function(directory, id = 1:332) {
setwd(directory)
newdf <- data.frame(Date=as.Date(character()),sulfate=double(),nitrate=double(),ID=integer())
summdf <- data.frame(id=integer(), nobs=integer())
for(i in id) {
if(i>0&i<10) {filename <- paste("00",i,".csv",sep = "")}
else if(i>9&i<100) {filename <- paste("0",i,".csv",sep = "")}
else if(i>99&i<333){filename <- paste(i,".csv",sep = "")}
else {print("Error: file not found. Try values between 1-332.")
# how to end the function
}
currentdf <- read.csv(filename, header = T)
nobs <- nrow(currentdf[complete.cases(currentdf),])
id <- i
nobsdf <- data.frame(id,nobs)
summdf <- rbind(summdf,nobsdf)
}
summdf
}
complete(mywdir, 1)
complete(mywdir, c(2,4,8,10,12))
complete(mywdir, 30:25)
complete(mywdir, 3)
install.packages("reshape2")
library(reshape2)
head(mtcars)
mtcars$carname <- rownames(mtcars)
carMelt <- melt(mtcars,id=c("carname","gear","cyl"), measure.vars = c("mpg","hp"))
head(carMelt,n=3)
cylData <- dcast(carMelt, cyl ~ variable)
cylData <- dcast(carMelt, cyl ~ variable,mean)
cylData
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
spIns = split(InsectSprays$count,InsectSprays$spray)
spIns
sprCOunt = lapply(spIns,sum)
sprCOunt
unlist(sprCOunt)
sapply(spIns,sum)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
library(Hmisc); library(plyr)
ddply(InsectSprays,.(spray),summarize,sum=sum(count))
spraySums <- ddply(InsectSprays,.(spray),summarize,sum=ave(count,FUN=sum))
dim(spraySums)
head(spraySums) # a new column is created corresponding to the sums of individual unique spray value for every row
setwd("C:/Users/User/Desktop/Coursera/Course3_Data_Cleaning/Week3 - Subsetting/")
idaho <- read.csv("./quiz/idaho.csv")
head(idaho)
names(idaho)
str(idaho)
agricultureLogical = data1$ACR == 3 & data1$AGS == 6
agricultureLogical = idaho$ACR == 3 & idaho$AGS == 6
if(!file.exists("./quiz")){dir.create("./quiz")}
agricultureLogical
factor(a <- idaho[(idaho$ACR==3 & idaho$AGS==6),])
idaho$agricultureLogical <- idaho[(idaho$ACR==3 & idaho$AGS==6),]
idaho[(idaho$ACR==3 & idaho$AGS==6),]
idaho$agricultureLogical <- (idaho$ACR==3 & idaho$AGS==6)
View(idaho)
View(idaho)
idaho <- read.csv("./quiz/idaho.csv")
idaho$agricultureLogical <- (idaho$ACR==3 & idaho$AGS==6)
View(idaho)
View(idaho)
names(idaho)
head(which(idaho$agricultureLogical),3)
install.packages("jpeg")
library(jpeg)
photo1 <- readJPEG(fileUrl2,native = TRUE)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
photo1 <- readJPEG(fileUrl2,native = TRUE)
photo1 <- readJPEG(fileUrl2,native = TRUE)
download.file(fileUrl2,"./quiz/jeff.jpg")
photo1 <- readJPEG(fileUrl2,native = F)
download.file(fileUrl2,"./quiz/jeff.jpg")
download.file(fileUrl2,"./quiz/jeff.jpg",mode = 'wb')
photo1 <- readJPEG("./quiz/jeff.jpg",native = T)
quantile(photo1,probs = c(0.3,0.8))
download.file(fileUrl3,"./quiz/FGDP.csv")
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3,"./quiz/FGDP.csv")
download.file(fileUrl4,"./quiz/FEDSTATS_Country.csv")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl4,"./quiz/FEDSTATS_Country.csv")
FGDP <- read.csv("./quiz/FGDP.csv")
FEDC <- read.csv("./quiz/FEDSTATS_Country.csv")
str(FGDP)
str(FEDC)
View(FEDC)
View(FEDC)
View(FGDP)
View(FGDP)
head(FEDC)
head(FGDP)
head(FGDP, 4)
tail(FGDP)
tail(FGDP,10)
tail(FGDP,12)
tail(FGDP,20)
View(FGDP)
View(FGDP)
str(FEDC)
str(FGDP)
str(FGDP)
length(FGDP$X)
length(FGDP$X.1)
FGDP$X
FGDP$Gross.domestic.product.2012
FGDP$X.1
FGDP$X.2
FGDP$X.3
FGDP$X.4
FGDP$X
FGDP$X.1
FGDP$X.1
FGDP$X.2
FGDP$X
FGDP$X.1
FGDP$X.2
FGDP$X.3
FGDP$X.4
FGDP$X.5
FGDP$X.6
FGDP$Gross.domestic.product.2012
is.na(FGDP$X)
FGDP$X[330]
FGDP$X
FGDP$X[330]
FGDP$X[330,]
FGDP$X[[330]
]
FGDP$X[[330]]
str(FGDP$X)
?fread
library(dplyr)
library(data.table)
library(Hmisc)
?fread
str(FGDP)
FGDPnew <- fread(FGDP, skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode", "Rank", "Economy", "Total"))
FGDPnew <- fread("./quiz/FGDP.csv", skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode", "Rank", "Economy", "Total"))
download.file(fileUrl3,"./quiz/FGDP.csv",mode = 'wb')
download.file(fileUrl4,"./quiz/FEDSTATS_Country.csv",mode = 'wb')
FGDP <- read.csv("./quiz/FGDP.csv")
FEDC <- read.csv("./quiz/FEDSTATS_Country.csv")
FGDPnew <- fread("./quiz/FGDP.csv", skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode", "Rank", "Economy", "Total"))
FGDPnew
FGDP
View(FGDP)
View(FGDP)
View(FEDC)
View(FEDC)
View(FEDC)
View(FGDP)
View(FGDP)
View(FGDPnew)
View(FGDPnew)
mergedDF <- merge(FGDPnew,FEDC,by = "CountryCode")
View(mergedDF)
View(mergedDF)
?sort(X$var1)
?order()
mergedDF <- mergedDF[order(mergedDF$Rank),]
View(mergedDF)
View(mergedDF)
mergedDF$Economy[mergedDF$Rank == 13]
mergedDF$Economy
names(mergedDF)
str(mergedDF)
head(mergedDF)
mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"]
aveGDP.rank <- mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"]
aveGDP.rank <- average(mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"])
aveGDP.rank <- mean(mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"])
aveGDP.rank
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: nonOECD"])
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"])
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: nonOECD"])
names(mergedDF)
newDF <- mergedDF[,c(2,6)]
newDF
quantile(newDF$Rank,probs = c(0.2,0.4,0.6,0.8))
newDF$Quantile <- quantile(newDF$Rank,probs = c(0.2,0.4,0.6,0.8))
newDF$Quantile <- quantile(newDF$Rank,probs = 5)
?quantile
tapply(merge$Rank, merge$`Income Group`, mean)
tapply(mergedDF$Rank, mergedDF$`Income Group`, mean)
tapply(mergedDF$Rank, mergedDF$`Income.Group`, mean)
newDF$Quantile <- quantile(newDF$Rank,probs = seq(0,1,0.2))
?cut2
library(Hmisc)
newDF$Quantile <- cut2(newDF$Rank,g = 5)
newDF
table(mergedDF$Quantile, mergedDF$Income.Group)
newDF
View(newDF)
View(newDF)
summary(newDF)
table(mergedDF$Quantile, mergedDF$Income.Group)
length(mergedDF$Quantile)
length(mergedDF$Income.Group)
View(newDF)
View(newDF)
newDF$Quantile
table(newDF$Quantile, newDF$Income.Group)
if(!file.exists("./quiz")){dir.create("./quiz")}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl1,"./quiz/idaho.csv")
idaho <- read.csv("./quiz/idaho.csv")
head(idaho)
names(idaho)
str(idaho)
idaho$agricultureLogical <- (idaho$ACR==3 & idaho$AGS==6)
head(which(idaho$agricultureLogical),3)
library(jpeg)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl2,"./quiz/jeff.jpg",mode = 'wb')
photo1 <- readJPEG("./quiz/jeff.jpg",native = T)
quantile(photo1,probs = c(0.3,0.8))
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3,"./quiz/FGDP.csv",mode = 'wb')
FGDP <- read.csv("./quiz/FGDP.csv")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl4,"./quiz/FEDSTATS_Country.csv",mode = 'wb')
FEDC <- read.csv("./quiz/FEDSTATS_Country.csv")
str(FEDC)
str(FGDP)
# Exploring and cleaning FGDP dataset
head(FGDP)
FGDP$X
FGDP$Gross.domestic.product.2012
FGDP$X.2
FGDP$X.3
a <- length(FGDP$X[is.na(FGDP$X)])
str(FGDP$X)
library(data.table)
FGDPnew <- fread("./quiz/FGDP.csv", skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode", "Rank", "Economy", "Total"))
mergedDF <- merge(FGDPnew,FEDC,by = "CountryCode") # baseR library
mergedDF <- mergedDF[order(mergedDF$Rank),] # data.table library
# Answer 3
mergedDF$Economy[mergedDF$Rank == 13]
tapply(mergedDF$Rank, mergedDF$`Income.Group`, mean)
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"])
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: nonOECD"])
View(mergedDF)
View(mergedDF)
library(dplyr)
mergedDF <- arrange(mergedDF,desc(Rank))
arrange(mergedDF,desc(Rank))
View(mergedDF)
View(mergedDF)
mergedDF$Economy[mergedDF$Rank == 13]
mergedDF$Economy[13,]
mergedDF$Economy[13,1]
Economy
mergedDF$Economy
mergedDF$Economy[13]
mergedDF$Economy[13]
if(!file.exists("./quiz")){dir.create("./quiz")}
fileUrl1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl1,"./quiz/idaho.csv")
idaho <- read.csv("./quiz/idaho.csv")
head(idaho)
names(idaho)
str(idaho)
idaho$agricultureLogical <- (idaho$ACR==3 & idaho$AGS==6)
head(which(idaho$agricultureLogical),3)
install.packages("jpeg")
library(jpeg)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl2,"./quiz/jeff.jpg",mode = 'wb')
photo1 <- readJPEG("./quiz/jeff.jpg",native = T)
quantile(photo1,probs = c(0.3,0.8))
install.packages("jpeg")
fileUrl3 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl3,"./quiz/FGDP.csv",mode = 'wb')
FGDP <- read.csv("./quiz/FGDP.csv")
fileUrl4 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl4,"./quiz/FEDSTATS_Country.csv",mode = 'wb')
FEDC <- read.csv("./quiz/FEDSTATS_Country.csv")
str(FEDC)
str(FGDP)
# Exploring and cleaning FGDP dataset
head(FGDP)
FGDP$X
FGDP$Gross.domestic.product.2012
FGDP$X.2
FGDP$X.3
a <- length(FGDP$X[is.na(FGDP$X)])
str(FGDP$X)
library(data.table)
library(dplyr)
FGDPnew <- fread("./quiz/FGDP.csv", skip = 4, nrows = 190, select = c(1,2,4,5), col.names = c("CountryCode", "Rank", "Economy", "Total"))
mergedDF <- merge(FGDPnew,FEDC,by = "CountryCode") # baseR library
mergedDF <- arrange(mergedDF,desc(Rank)) # dplyr library
# Answer 3
mergedDF$Economy[13]
nrow(mergedDF)
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: OECD"])
mean(mergedDF$Rank[mergedDF$Income.Group=="High income: nonOECD"])
tapply(mergedDF$Rank, mergedDF$`Income.Group`, mean)
setwd("C:/Users/User/Desktop/Coursera/Course3_Data_Cleaning/Week4/")
if(!file.exists("./data")) {dir.create("./data")}
fileUrl <- "https://data.batlimorecito.gov/api/views/dx54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/cameras.csv", mode = 'wb')
fileUrl <- "https://data.batlimorecity.gov/api/views/dx54-2aru/rows.csv?accessType=DOWNLOAD"
fileUrl <- "https://data.batlimorecity.gov/api/views/dx54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/cameras.csv", mode = 'wb')
fileUrl <- "https://data.baltimorecity.gov/api/views/dx54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/cameras.csv", mode = 'wb')
fileUrl <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile = "./data/cameras.csv", mode = 'wb')
camData <- read.csv("./data/cameras.csv")
names(cameraData)
names(camData)
splitNames = strsplit(names(camData),"\\.")
splitNames
grep("Alameda",camData$intersection)
grepl("Alameda",camData$intersection)
library(stringr)
nchar("Proles Joseph")
substr("Proles Joseph",1,7)
substr("Proles Joseph",1,6)
paste("Proles","Joseph")
paste0("Proles","Joseph")
str_trim("Proles    ")
d1 <- date()
d1
class(d1)
d2 <- Sys.Date()
class(d2)
